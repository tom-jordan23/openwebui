# Production Docker Compose Configuration
# OpenWebUI AI Assistant Platform - Production Deployment
# Features: LightLLM, GraphRAG, MCP, Monitoring, Security

version: '3.8'

services:
  # OpenWebUI Frontend Application
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379
      - VECTOR_DB_URL=http://qdrant:6333
      - GRAPH_DB_URL=bolt://neo4j:7687
      - LIGHTLLM_URL=http://lightllm:8000
      - MCP_SERVER_URL=http://mcp-server:9000
      - ENABLE_GRAPHRAG=true
      - ENABLE_MCP=true
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - openwebui_data:/app/backend/data
      - openwebui_config:/app/backend/config:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      lightllm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # LightLLM High-Performance Model Server
  lightllm:
    image: modelscope/lightllm:latest
    container_name: lightllm-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MODEL_PATH=/models
      - HOST=0.0.0.0
      - PORT=8000
      - GPU_MEMORY_FRACTION=0.9
      - MAX_TOTAL_TOKEN_NUM=120000
      - LOG_LEVEL=INFO
    volumes:
      - lightllm_models:/models:ro
      - lightllm_cache:/cache
    command: >
      python -m lightllm.server.api_server
      --model_dir /models
      --host 0.0.0.0
      --port 8000
      --tp 1
      --max_total_token_num 120000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 32G
        reservations:
          cpus: '4.0'
          memory: 16G
      # GPU support - uncomment if using NVIDIA GPUs
      # reservations:
      #   devices:
      #     - driver: nvidia
      #       count: 1
      #       capabilities: [gpu]
    networks:
      - ai-assistant
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # GraphRAG Document Processor
  graphrag-processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.graphrag
    container_name: graphrag-processor-prod
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/2
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - VECTOR_DB_URL=http://qdrant:6333
      - GRAPH_DB_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src:ro
      - graphrag_temp:/tmp/graphrag
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - ai-assistant
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Celery Workers for Async Processing
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.graphrag
    container_name: celery-worker-prod
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/2
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - VECTOR_DB_URL=http://qdrant:6333
      - GRAPH_DB_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src:ro
      - graphrag_temp:/tmp/graphrag
    command: celery -A src.knowledge.graphrag_service worker --loglevel=info --concurrency=4
    depends_on:
      - redis-master
      - postgres-primary
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - ai-assistant
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.graphrag
    container_name: celery-beat-prod
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/2
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src:ro
      - celery_beat_data:/app/celerybeat-schedule
    command: celery -A src.knowledge.graphrag_service beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis-master
      - postgres-primary
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - ai-assistant
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    container_name: mcp-server-prod
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=9000
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379
      - VECTOR_DB_URL=http://qdrant:6333
      - GRAPH_DB_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - LIGHTLLM_URL=http://lightllm:8000
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src:ro
      - mcp_data:/app/data
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - ai-assistant
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=md5"
      - POSTGRES_HOST_AUTH_METHOD=md5
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
      - postgres_config:/etc/postgresql
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: redis-master-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-prod
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_config:/qdrant/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G
        reservations:
          cpus: '1.0'
          memory: 4G
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-enterprise
    container_name: neo4j-prod
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=8G
      - NEO4J_dbms_memory_pagecache_size=4G
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
      - NEO4J_dbms_logs_query_enabled=INFO
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G
        reservations:
          cpus: '1.0'
          memory: 4G
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - openwebui
      - grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    networks:
      - ai-assistant
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_RETENTION_SIZE=10GB
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '0.5'
          memory: 2G
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Analytics Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://your-domain.com/grafana/
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres-primary:5432
      - GF_DATABASE_NAME=${DB_NAME}
      - GF_DATABASE_USER=${DB_USER}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-prod
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  # Application Data
  openwebui_data:
    driver: local
  openwebui_config:
    driver: local
  lightllm_models:
    driver: local
  lightllm_cache:
    driver: local
  graphrag_temp:
    driver: local
  celery_beat_data:
    driver: local
  mcp_data:
    driver: local
  
  # Database Volumes
  postgres_primary_data:
    driver: local
  postgres_config:
    driver: local
  redis_master_data:
    driver: local
  qdrant_data:
    driver: local
  qdrant_config:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  
  # Monitoring Volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Infrastructure Volumes
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  ai-assistant:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16