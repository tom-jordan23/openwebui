# HAProxy Configuration for OpenWebUI High Availability
# Load balancing with health checks and failover

global
    daemon
    maxconn 4096
    log stdout local0
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m
    tune.ssl.default-dh-param 2048

defaults
    mode http
    timeout connect 5s
    timeout client 50s
    timeout server 50s
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout check 5s
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    maxconn 2000

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if LOCALHOST
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin123}

# Frontend for HTTP traffic
frontend http_frontend
    bind *:80
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Health check endpoint
    acl health_check path_beg /health
    use_backend openwebui_health if health_check
    
    # API endpoints
    acl api_request path_beg /api
    use_backend openwebui_api if api_request
    
    # Default backend
    default_backend openwebui_web

# Backend for health checks
backend openwebui_health
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server openwebui-1 openwebui-1:8080 check inter 10s fall 3 rise 2
    server openwebui-2 openwebui-2:8080 check inter 10s fall 3 rise 2

# Backend for API requests (session affinity)
backend openwebui_api
    balance roundrobin
    stick-table type ip size 200k expire 30m
    stick on src
    option httpchk GET /api/health
    http-check expect status 200
    
    server openwebui-1 openwebui-1:8080 check inter 15s fall 3 rise 2 weight 100
    server openwebui-2 openwebui-2:8080 check inter 15s fall 3 rise 2 weight 100

# Backend for web requests
backend openwebui_web
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    # Cookie-based session persistence
    cookie OPENWEBUI_SERVER insert indirect nocache
    
    server openwebui-1 openwebui-1:8080 check inter 15s fall 3 rise 2 cookie s1
    server openwebui-2 openwebui-2:8080 check inter 15s fall 3 rise 2 cookie s2

# Backend for PostgreSQL (read/write splitting)
frontend postgres_frontend
    bind *:5432
    mode tcp
    default_backend postgres_primary

backend postgres_primary
    mode tcp
    balance first
    option tcp-check
    tcp-check connect
    tcp-check send-binary 00000020 # packet length
    tcp-check send-binary 00030000 # protocol version
    tcp-check send-binary 7573657200 # "user"
    tcp-check send-binary 706f737467726573 # "postgres"
    tcp-check send-binary 0064617461626173650000 # "database"
    tcp-check expect binary 52 # Authentication OK
    
    server postgres-primary postgres-primary:5432 check inter 5s fall 2 rise 1
    server postgres-replica postgres-replica:5432 check inter 5s fall 2 rise 1 backup

# Backend for Redis Sentinel
frontend redis_frontend
    bind *:6379
    mode tcp
    default_backend redis_backend

backend redis_backend
    mode tcp
    balance first
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server redis-master redis-master:6379 check inter 3s fall 2 rise 1
    server redis-replica redis-replica:6379 check inter 3s fall 2 rise 1 backup

# Log configuration
log-tag haproxy-lb