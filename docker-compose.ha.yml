# High Availability Docker Compose Configuration
# OpenWebUI AI Assistant Platform - Enterprise HA Deployment
# Features: Database Clustering, Redis Sentinel, Multi-node Architecture

version: '3.8'

services:
  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary-ha
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPLICATION_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./config/postgres/primary:/docker-entrypoint-initdb.d:ro
      - ./config/postgres/postgresql-primary.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c wal_level=replica
      -c max_wal_senders=3
      -c max_replication_slots=3
      -c hot_standby=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # PostgreSQL Replica Database
  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica-ha
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPLICATION_PASSWORD}
      - PGUSER=${DB_USER}
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_PRIMARY_PORT=5432
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./config/postgres/replica:/docker-entrypoint-initdb.d:ro
      - ./config/postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      bash -c '
      if [ ! -f /var/lib/postgresql/data/pgdata/PG_VERSION ]; then
        echo "Setting up streaming replication..."
        pg_basebackup -h postgres-primary -D /var/lib/postgresql/data/pgdata -U replicator -v -P -W
        echo "standby_mode = on" >> /var/lib/postgresql/data/pgdata/recovery.conf
        echo "primary_conninfo = host=postgres-primary port=5432 user=replicator" >> /var/lib/postgresql/data/pgdata/recovery.conf
        echo "trigger_file = /var/lib/postgresql/data/pgdata/promote" >> /var/lib/postgresql/data/pgdata/recovery.conf
      fi
      postgres -c config_file=/etc/postgresql/postgresql.conf
      '
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Redis Sentinel - Node 1
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: redis-sentinel-1-ha
    restart: unless-stopped
    ports:
      - "26379:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config/redis/sentinel-1.conf:/etc/redis/sentinel.conf:ro
      - redis_sentinel_1_data:/data
    command: redis-sentinel /etc/redis/sentinel.conf
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - ai-assistant-ha
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "2"

  # Redis Sentinel - Node 2
  redis-sentinel-2:
    image: redis:7-alpine
    container_name: redis-sentinel-2-ha
    restart: unless-stopped
    ports:
      - "26380:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config/redis/sentinel-2.conf:/etc/redis/sentinel.conf:ro
      - redis_sentinel_2_data:/data
    command: redis-sentinel /etc/redis/sentinel.conf
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - ai-assistant-ha
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "2"

  # Redis Sentinel - Node 3
  redis-sentinel-3:
    image: redis:7-alpine
    container_name: redis-sentinel-3-ha
    restart: unless-stopped
    ports:
      - "26381:26379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config/redis/sentinel-3.conf:/etc/redis/sentinel.conf:ro
      - redis_sentinel_3_data:/data
    command: redis-sentinel /etc/redis/sentinel.conf
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - ai-assistant-ha
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "2"

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: redis-master-ha
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
      - ./config/redis/redis-master.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Redis Replica
  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica-ha
    restart: unless-stopped
    ports:
      - "6380:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_replica_data:/data
      - ./config/redis/redis-replica.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --replicaof redis-master 6379 --masterauth ${REDIS_PASSWORD}
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Qdrant Cluster - Node 1 (Leader)
  qdrant-1:
    image: qdrant/qdrant:latest
    container_name: qdrant-1-ha
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__CLUSTER__ENABLED=true
      - QDRANT__CLUSTER__P2P__PORT=6335
      - QDRANT__CLUSTER__CONSENSUS__TICK_PERIOD_MS=100
    volumes:
      - qdrant_1_data:/qdrant/storage
      - ./config/qdrant/config-1.yaml:/qdrant/config/production.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Qdrant Cluster - Node 2
  qdrant-2:
    image: qdrant/qdrant:latest
    container_name: qdrant-2-ha
    restart: unless-stopped
    ports:
      - "6336:6333"
      - "6337:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__CLUSTER__ENABLED=true
      - QDRANT__CLUSTER__P2P__PORT=6335
      - QDRANT__CLUSTER__CONSENSUS__TICK_PERIOD_MS=100
      - QDRANT__CLUSTER__BOOTSTRAP__PEERS=qdrant-1:6335
    volumes:
      - qdrant_2_data:/qdrant/storage
      - ./config/qdrant/config-2.yaml:/qdrant/config/production.yaml:ro
    depends_on:
      qdrant-1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # Neo4j Cluster - Core Server 1
  neo4j-core-1:
    image: neo4j:5-enterprise
    container_name: neo4j-core-1-ha
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
      - "5000:5000"
      - "6000:6000"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_mode=CORE
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_causal__clustering_minimum__core__cluster__size__at__formation=3
      - NEO4J_causal__clustering_discovery__advertised__address=neo4j-core-1:5000
      - NEO4J_causal__clustering_transaction__advertised__address=neo4j-core-1:6000
      - NEO4J_causal__clustering_raft__advertised__address=neo4j-core-1:7000
      - NEO4J_causal__clustering_initial__discovery__members=neo4j-core-1:5000,neo4j-core-2:5000,neo4j-core-3:5000
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=8G
      - NEO4J_dbms_memory_pagecache_size=4G
    volumes:
      - neo4j_core_1_data:/data
      - neo4j_core_1_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 12G
        reservations:
          cpus: '1.0'
          memory: 6G
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # HAProxy Load Balancer
  haproxy:
    image: haproxy:2.8-alpine
    container_name: haproxy-ha
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats interface
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./config/haproxy/ssl:/etc/ssl/certs:ro
    depends_on:
      - openwebui-1
      - openwebui-2
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - ai-assistant-ha
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # OpenWebUI Instance 1
  openwebui-1:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui-1-ha
    restart: unless-stopped
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_SENTINEL_SERVICE_NAME=mymaster
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - VECTOR_DB_URL=http://qdrant-1:6333
      - GRAPH_DB_URL=bolt://neo4j-core-1:7687
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - INSTANCE_ID=openwebui-1
      - CLUSTER_MODE=true
      - LOG_LEVEL=INFO
    volumes:
      - openwebui_1_data:/app/backend/data
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-sentinel-1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - ai-assistant-ha
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # OpenWebUI Instance 2
  openwebui-2:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui-2-ha
    restart: unless-stopped
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-replica:5432/${DB_NAME}
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_SENTINEL_SERVICE_NAME=mymaster
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - VECTOR_DB_URL=http://qdrant-2:6333
      - GRAPH_DB_URL=bolt://neo4j-core-1:7687
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - INSTANCE_ID=openwebui-2
      - CLUSTER_MODE=true
      - LOG_LEVEL=INFO
    volumes:
      - openwebui_2_data:/app/backend/data
    depends_on:
      postgres-replica:
        condition: service_healthy
      redis-sentinel-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - ai-assistant-ha
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  # PostgreSQL Volumes
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  
  # Redis Volumes
  redis_master_data:
    driver: local
  redis_replica_data:
    driver: local
  redis_sentinel_1_data:
    driver: local
  redis_sentinel_2_data:
    driver: local
  redis_sentinel_3_data:
    driver: local
  
  # Qdrant Volumes
  qdrant_1_data:
    driver: local
  qdrant_2_data:
    driver: local
  
  # Neo4j Volumes
  neo4j_core_1_data:
    driver: local
  neo4j_core_1_logs:
    driver: local
  
  # OpenWebUI Volumes
  openwebui_1_data:
    driver: local
  openwebui_2_data:
    driver: local

networks:
  ai-assistant-ha:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16