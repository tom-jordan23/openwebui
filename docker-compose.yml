services:
  openwebui:
    build:
      context: .
      dockerfile: Dockerfile
    image: openwebui-blueprint:latest
    container_name: openwebui
    ports:
      - "3000:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/openwebui
      - REDIS_URL=redis://redis:6379
      - AUTO_ACTIVATE_FIRST_ADMIN=${AUTO_ACTIVATE_FIRST_ADMIN:-true}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-}
    volumes:
      - ./data/openwebui:/app/backend/data
      - ./config/openwebui:/app/backend/config
      - ./scripts:/app/scripts
      - ./src/frontend/styles:/app/backend/static/themes/blueprint:ro
    depends_on:
      - postgres
      - redis
      - admin-activator
    restart: unless-stopped
    networks:
      - ai-assistant

  # Service to auto-activate first admin user
  admin-activator:
    image: postgres:15-alpine
    container_name: admin-activator
    environment:
      - PGPASSWORD=postgres
    volumes:
      - ./scripts:/scripts
    depends_on:
      - postgres
    command: >
      sh -c "
        echo 'Waiting for database to be ready...';
        while ! pg_isready -h postgres -p 5432 -U postgres -d openwebui; do
          echo 'Database not ready, waiting 5 seconds...';
          sleep 5;
        done;
        echo 'Database is ready. Checking for admin users...';
        ADMIN_COUNT=$$(psql -h postgres -U postgres -d openwebui -t -c \"SELECT COUNT(*) FROM \\\"user\\\" WHERE role = 'admin';\");
        if [ \"$$ADMIN_COUNT\" -eq 0 ]; then
          echo 'No admin users found. Activating first user as admin...';
          FIRST_USER_ID=$$(psql -h postgres -U postgres -d openwebui -t -c \"SELECT id FROM \\\"user\\\" ORDER BY created_at ASC LIMIT 1;\" | tr -d ' ');
          if [ ! -z \"$$FIRST_USER_ID\" ]; then
            psql -h postgres -U postgres -d openwebui -c \"UPDATE \\\"user\\\" SET role = 'admin' WHERE id = '$$FIRST_USER_ID';\";
            psql -h postgres -U postgres -d openwebui -c \"UPDATE auth SET active = true WHERE id = '$$FIRST_USER_ID';\";
            USER_INFO=$$(psql -h postgres -U postgres -d openwebui -t -c \"SELECT name, email FROM \\\"user\\\" WHERE id = '$$FIRST_USER_ID';\");
            echo \"Successfully activated first user as admin: $$USER_INFO\";
          else
            echo 'No users found in database yet.';
          fi;
        else
          echo \"Found $$ADMIN_COUNT admin user(s). No action needed.\";
        fi;
        echo 'Admin activation check complete.';
      "
    networks:
      - ai-assistant
    restart: "no"

  # Using Ollama for simple local model serving
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - ai-assistant

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=openwebui
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
      - ./database/migrations:/migrations
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ai-assistant

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ai-assistant

  vector-db:
    image: qdrant/qdrant:latest
    container_name: vector-db
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    restart: unless-stopped
    networks:
      - ai-assistant

  graph-db:
    image: neo4j:5-community
    container_name: graph-db
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    restart: unless-stopped
    networks:
      - ai-assistant

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8081:80"
      - "9443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./src/frontend/styles:/themes/blueprint:ro
      - ./src/frontend/blueprint-index.html:/themes/blueprint/blueprint-index.html:ro
    depends_on:
      - openwebui
    restart: unless-stopped
    networks:
      - ai-assistant

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  ollama_data:

networks:
  ai-assistant:
    driver: bridge